<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   creationComplete="initCom()" backgroundAlpha="0.3" borderWeight="5" borderColor="0xAAAAAA" borderStyle="inset">
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	
	<s:VGroup width="100%" height="100%" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10"> 
		<s:Label text="Image Uploader" fontFamily="Georgia" fontSize="20" fontStyle="italic"/>
		<s:HGroup width="80%" verticalAlign="middle" paddingLeft="10">
			<s:TextInput id="albumName" prompt="Album Name" width="100%" text="trebyAlbum"/>
			<s:TextInput id="txtOwner" prompt="Owner" width="100%" text="treby"/>
		</s:HGroup>
		
		
		<mx:DataGrid width="100%" height="90%" id="dgUploadList" allowMultipleSelection="true" doubleClickEnabled="true" 
					itemDoubleClick="dgUploadListdoubleClickHandler(event)" itemClick="dgUploadListclickHandler(event)" resizableColumns="false"
					sortableColumns="false" selectionColor="0xBBBBBB" rollOverColor="0xCCCCCC" alternatingItemColors="[#EEEEEE,#DFDFDF]"
					textRollOverColor="0xFFFF00" focusColor="0xAAAAAA" tabEnabled="false" tabIndex="1000" tabChildren="false">
			<mx:columns>
				<!--<s:ArrayList> itemRenderer="com.userinterface.views.ProgressRenderer" -->
					<mx:DataGridColumn id="dcFileName" dataField="filename" headerText="Filename" editable="true" />
					<mx:DataGridColumn id="dcSize" dataField="size" headerText="Size" width="70" editable="false"/>
					<mx:DataGridColumn id="dcProgress" dataField="status" headerText="Status" width="150" editable="false" itemRenderer="com.userinterface.views.myProgressItemRenderer"/>
				<!--</s:ArrayList>-->
			</mx:columns>
		</mx:DataGrid>
		<s:HGroup width="100%" height="33" paddingLeft="3" paddingRight="3" verticalAlign="middle">
			<s:Button id="btnAddFile" label="Add File" click="addFiles()"/>
			<s:Button id="btnRemFile" label="Remove File" click="removeFiles()"/>
			<mx:Spacer width="100%"/>
			<s:Button id="btnUpload" label="Upload"/>
		</s:HGroup>
	</s:VGroup>
	
	<fx:Script>
		<![CDATA[
			import com.publicdatas.AccessUrl;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.ListEvent;
			
			import spark.components.supportClasses.ItemRenderer;
			import spark.skins.spark.DefaultGridItemRenderer;
			private var _strUploadUrl:String;
			private var _refAddFiles:FileReferenceList;    
			private var _refUploadFile:FileReference;
			public var _arrUploadFiles:ArrayCollection;
			private var _numCurrentUpload:Number = 0;      
			
			private static var UPLOAD:String = "Upload";
			private static var RESET:String = "Reset";
			private static var CANCEL:String = "Cancel";
			//
			// Initalize
			private function initCom():void {
			
				_strUploadUrl = AccessUrl.getHttpUrl+AccessUrl.getUploadPHP+"imageUpload.php";
				trace(_strUploadUrl);
				_arrUploadFiles = new ArrayCollection();                
				enableUI();
				uploadCheck();
				btnUpload.addEventListener(MouseEvent.CLICK,uploadClickHandler);
			}
			
			// Called to add file(s) for upload
			private function addFiles():void {
				_refAddFiles = new FileReferenceList();
				_refAddFiles.addEventListener(Event.SELECT, onSelectFile);
				var fileFilter:FileFilter = new FileFilter("Images (*.jpg,*.gif,*.png,*.bmp)", "*.jpg;*.gif;*.png;*.bmp");
				_refAddFiles.browse([fileFilter]);  
			}
			
			// Called when a file is selected
			private function onSelectFile(event:Event):void {
				
				var _fleRef:FileReference = _refAddFiles.fileList[ _refAddFiles.fileList.length-1];
				var arrMediaSupportdFile:Array = [".jpg", ".gif", ".png", ".bmp"];
				var arrFile:Array = String(_fleRef.name).split(".");
				var arrFoundList:Array = new Array();
				var i:int;
				if (_arrUploadFiles == null)
					_arrUploadFiles = new ArrayCollection();
				// Get list of files from fileList, make list of files already on upload list
				if (_arrUploadFiles.length > 0){
					for (i = 0; i < _arrUploadFiles.length; i++) {
						for (var j:Number = 0; j < _refAddFiles.fileList.length; j++) {
							if (_arrUploadFiles.getItemAt(i).filename == _refAddFiles.fileList[j].name) {
								arrFoundList.push(_refAddFiles.fileList[j].name);
								_refAddFiles.fileList.splice(j, 1);
								j--;
							}
						}
					}
					}
				if (_refAddFiles.fileList.length >= 1) {                
					for (var k:Number = 0; k < _refAddFiles.fileList.length; k++) {
						if (arrMediaSupportdFile.indexOf(String(_refAddFiles.fileList[k].type).toLowerCase()) != -1){
						_arrUploadFiles.addItem({
							filename:_refAddFiles.fileList[k].name,
							size:formatFileSize(_refAddFiles.fileList[k].size),
							type:_refAddFiles.fileList[k].type,
							file:_refAddFiles.fileList[k],
							status:_refAddFiles.fileList[k]});
						}
					}
					dgUploadList.dataProvider = _arrUploadFiles;
					//dgUploadList.selectedIndex = _arrUploadFiles.length - 1;
				}    
				
				if (arrFoundList.length >= 1) {
					Alert.show("The file(s): \n\n• " + arrFoundList.join("\n• ") + "\n\n...are already on the upload list. Please change the filename(s) or pick a different file.", "File(s) already on list");
				}
				updateProgBar();
				
				uploadCheck();
			}
			
			// Called to format number to file size
			private function formatFileSize(numSize:Number):String {
				var strReturn:String;
				numSize = Number(numSize / 1000);
				strReturn = String(numSize.toFixed(1) + " KB");
				if (numSize > 1000) {
					numSize = numSize / 1000;
					strReturn = String(numSize.toFixed(1) + " MB");
					if (numSize > 1000) {
						numSize = numSize / 1000;
						strReturn = String(numSize.toFixed(1) + " GB");
					}
				}                
				return strReturn;
			}
			
			// Called to remove selected file(s) for upload
			private function removeFiles():void {
				if (_arrUploadFiles == null || _arrUploadFiles.length == 0) return;
				var arrSelected:Array = String(dgUploadList.selectedIndices).split(",");
				var tempArrUploadFiles:ArrayCollection = new ArrayCollection();
				//arrSelected = arrSelected.reverse();
				if (arrSelected.length > 0) {
					for (var j:int = 0; j < _arrUploadFiles.length; j++) {
						if (arrSelected.indexOf(String(j)) == -1)
							tempArrUploadFiles.addItem(_arrUploadFiles.getItemAt(j));
					
					}
					_arrUploadFiles = tempArrUploadFiles;
					dgUploadList.dataProvider = _arrUploadFiles;
					dgUploadList.selectedIndex = -1;                    
				}
				dgUploadList.invalidateDisplayList();
				//updateProgBar();
				scrollFiles();
				uploadCheck();
			}
			
			// Called to check if there is at least one file to upload
			private function uploadCheck():void {
				if (_arrUploadFiles.length == 0) {
					btnUpload.enabled = false;
					//dgUploadList.verticalScrollPolicy = "off";
				} else {
					btnUpload.enabled = true;
					//dgUploadList.verticalScrollPolicy = "on";
				}
			}
			
			// Disable UI control
			private function disableUI():void {
				btnAddFile.enabled = false;
				btnRemFile.enabled = false;
				txtOwner.enabled = false;
				albumName.enabled = false;
				dgUploadList.enabled = false;
				//dgUploadList.verticalScrollPolicy = "off";
			}
			
			// Enable UI control
			private function enableUI():void {
				btnAddFile.enabled = true;
				btnRemFile.enabled = true;
				txtOwner.enabled = true;
				albumName.enabled = true;
				dgUploadList.enabled = true;
				//dgUploadList.verticalScrollPolicy = "on";
			}
			
			// Scroll listFiles to selected row
			private function scrollFiles():void {
				if (dgUploadList.selectedIndex > -1){
					dgUploadList.verticalScrollPosition = dgUploadList.selectedIndex;
					dgUploadList.invalidateDisplayList();
				}
			}
			
			// Called to upload file based on current upload number
			private function uploadClickHandler(e:Event = null):void {
				if (uploadErrorChecking()) {
					disableUI();
					dgUploadList.selectedIndex = _numCurrentUpload;
					if (btnUpload.hasEventListener(MouseEvent.CLICK) && btnUpload.label == UPLOAD){
						btnUpload.removeEventListener(MouseEvent.CLICK,uploadClickHandler);
						btnUpload.addEventListener(MouseEvent.CLICK,onUploadCanceled);
						btnUpload.label = CANCEL;
					}
					scrollFiles();
					
					// Variables to send along with upload
					// memberId
					// viewName
					// Filedata
					
					var sendVars:URLVariables = new URLVariables();
					sendVars.memberId = "1";
					sendVars.viewName = dgUploadList.selectedItem.filename;
					sendVars.type = dgUploadList.selectedItem.type;
					sendVars.albumName = albumName.text;
					sendVars.owner = txtOwner.text;
					
					var request:URLRequest = new URLRequest();
					request.data = sendVars;
					request.url = _strUploadUrl;
					trace(_strUploadUrl);
					request.method = URLRequestMethod.POST;
					_refUploadFile = new FileReference();
					_refUploadFile = dgUploadList.selectedItem.file;
					_refUploadFile.addEventListener(ProgressEvent.PROGRESS, onUploadProgress);
					_refUploadFile.addEventListener(Event.COMPLETE, onUploadComplete);
					_refUploadFile.addEventListener(IOErrorEvent.IO_ERROR, onUploadIoError);
					_refUploadFile.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onUploadSecurityError);
					_refUploadFile.upload(request, "file", false);
				}
			}
			
			private function uploadErrorChecking():Boolean{
				var arrError:Array = new Array();
				
				if (_arrUploadFiles.length == 0)
					arrError.push("No Files to be uploaded");
				if (albumName.text == "")
					arrError.push("Album Name Field Empty");
				if (txtOwner.text == "")
					arrError.push("Owner Field Empty");
				if (arrError.length > 0){
					Alert.show("Error found on the ff:\n •  " + arrError.join("\n •  "),"Upload Error");
					return false;
				}
				return true;
			}
			
			// Cancel and clear eventlisteners on last upload
			private function clearUpload():void {
				_refUploadFile.removeEventListener(ProgressEvent.PROGRESS, onUploadProgress);
				_refUploadFile.removeEventListener(Event.COMPLETE, onUploadComplete);
				_refUploadFile.removeEventListener(IOErrorEvent.IO_ERROR, onUploadIoError);
				_refUploadFile.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onUploadSecurityError);
				_refUploadFile.cancel();
				_numCurrentUpload = 0;
				//updateProgBar();
				//enableUI();
			}
			
			// Called on upload cancel
			private function onUploadCanceled(e:Event):void {
				clearUpload();
				enableUI();
				btnUpload.removeEventListener(MouseEvent.CLICK,onUploadCanceled);
				btnUpload.addEventListener(MouseEvent.CLICK,uploadClickHandler);
				btnUpload.label = UPLOAD;
			}
			
			// Get upload progress
			private function onUploadProgress(e:ProgressEvent):void {
				var numPerc:Number = Math.round((e.bytesLoaded / e.bytesTotal) * 100);
				updateProgBar(numPerc);
				trace("Main: ",e.bytesLoaded,"of",e.bytesTotal)
				
			}
			
			// Update progBar
			[Bindable]
			public var _UpProgress:Number;
			private function updateProgBar(numPerc:Number = 0):void {
				if (_arrUploadFiles == null) return;
				var strLabel:String = (_numCurrentUpload + 1) + "/" + _arrUploadFiles.length;
				strLabel = (_numCurrentUpload + 1 <= _arrUploadFiles.length && numPerc > 0 && numPerc < 100) ? numPerc + "% - " + strLabel : strLabel;
				strLabel = (_numCurrentUpload + 1 == _arrUploadFiles.length && numPerc == 100) ? "Upload Complete - " + strLabel : strLabel;
				strLabel = (_arrUploadFiles.length == 0) ? "" : strLabel;
				_UpProgress = numPerc;
				trace("in Progress");
//				progBar.label = strLabel;
//				progBar.setProgress(numPerc, 100);
//				progBar.validateNow();
			}
			
			// Called on upload complete
			private function onUploadComplete(event:Event):void {
				trace(_arrUploadFiles[_numCurrentUpload].filename,": Upload Complete!");
				if (_arrUploadFiles == null) return;
				_numCurrentUpload++;                
				if (_numCurrentUpload < _arrUploadFiles.length) {
					uploadClickHandler();
				} else {
					disableUI();
					clearUpload();
					btnUpload.label = RESET;
					btnUpload.removeEventListener(MouseEvent.CLICK,uploadClickHandler);
					btnUpload.addEventListener(MouseEvent.CLICK,resetUploader);
					dispatchEvent(new Event("uploadComplete"));
				}
			}
			
			private function resetUploader(e:Event):void{
				
				enableUI();
				dgUploadList.selectedIndex = -1;
				txtOwner.text = "";
				albumName.text = "";
				_arrUploadFiles = null;
				dgUploadList.itemRenderer = null
				dgUploadList.dataProvider = _arrUploadFiles;
				dgUploadList.invalidateDisplayList()
				btnUpload.enabled = false;
				btnUpload.removeEventListener(MouseEvent.CLICK,resetUploader);
				btnUpload.addEventListener(MouseEvent.CLICK,uploadClickHandler);
				btnUpload.label = UPLOAD;
				
				
			}
			// Called on upload io error
			private function onUploadIoError(event:IOErrorEvent):void {
				clearUpload();
				var evt:IOErrorEvent = new IOErrorEvent("uploadIoError", false, false, event.text);
				dispatchEvent(evt);
			}
			
			// Called on upload security error
			private function onUploadSecurityError(event:SecurityErrorEvent):void {
				clearUpload();
				var evt:SecurityErrorEvent = new SecurityErrorEvent("uploadSecurityError", false, false, event.text);
				dispatchEvent(evt);
			}
			
			protected function dgUploadListdoubleClickHandler(event:ListEvent):void
			{
				//if (event.target is GridColumn && GridColumn(event.target).id)
				dgUploadList.editable = true;
				dgUploadList.editedItemPosition = {columnIndex:0,rowIndex:event.rowIndex};
				
			}
			
			protected function dgUploadListclickHandler(event:Event):void
			{
				dgUploadList.editable = false
			}
			
		]]>
	</fx:Script>
</s:BorderContainer>
